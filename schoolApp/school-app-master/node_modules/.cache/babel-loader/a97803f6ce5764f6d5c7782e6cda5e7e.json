{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfullLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.errorInterceptor();\n    this.setupAxioxInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;else return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';else return user;\n  }\n\n  errorInterceptor() {\n    // Add a response interceptor\n    axios.interceptors.response.use(function (response) {\n      // Do something with response data\n      return response;\n    }, function (error) {\n      // Do something with response error\n      console.log(error.response);\n      return Promise.reject(error);\n    });\n  }\n\n  setupAxioxInterceptors() {\n    let user = 'user';\n    let password = 'password'; //encoding auth header USINT BTOA JS\n\n    let basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/ali/Documents/WS21/Training Spring React/school-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfullLogin","username","password","sessionStorage","setItem","errorInterceptor","setupAxioxInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","response","use","error","console","log","Promise","reject","basicAuthHeader","window","btoa","request","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,wBAAwB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC1CC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,gBAAL;AACA,SAAKC,sBAAL;AAEF;;AAEDC,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP,CAAlB,KACK,OAAO,IAAP;AACR;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP,CAAhB,KACK,OAAOA,IAAP;AAER;;AAEDL,EAAAA,gBAAgB,GAAG;AACf;AACRP,IAAAA,KAAK,CAACe,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,UAAUD,QAAV,EAAoB;AAChD;AACA,aAAOA,QAAP;AACD,KAHH,EAGK,UAAUE,KAAV,EAAiB;AAClB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,QAAlB;AACA,aAAOK,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,KAPH;AAQK;;AAELV,EAAAA,sBAAsB,GAAG;AACrB,QAAII,IAAI,GAAG,MAAX;AACA,QAAIR,QAAQ,GAAG,UAAf,CAFqB,CAIzB;;AAEA,QAAImB,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYb,IAAI,GAAG,GAAP,GAAaR,QAAzB,CAAjC;AAEIJ,IAAAA,KAAK,CAACe,YAAN,CAAmBW,OAAnB,CAA2BT,GAA3B,CACKU,MAAD,IAAY;AACR,UAAG,KAAKhB,cAAL,EAAH,EAA0B;AAE1BgB,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,eAA/B;AACC;;AACD,aAAOI,MAAP;AAEH,KARL;AAUH;;AAxD2B;;AA6D5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nclass AuthenticationService {\n\n    registerSuccessfullLogin(username, password) {\n       sessionStorage.setItem('authenticatedUser', username) \n       this.errorInterceptor()\n       this.setupAxioxInterceptors()\n\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser')\n    }\n\n    isUserLoggedIn(){\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        else return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        else return user\n\n    }\n\n    errorInterceptor (){\n        // Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    console.log(error.response);\n    return Promise.reject(error);\n  });\n    }\n\nsetupAxioxInterceptors() {\n    let user = 'user'\n    let password = 'password'\n\n//encoding auth header USINT BTOA JS\n\nlet basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password)\n\n    axios.interceptors.request.use(\n        (config) => {\n            if(this.isUserLoggedIn()) {\n\n            config.headers.authorization = basicAuthHeader\n            }\n            return config\n\n        }\n    )\n}\n}\n\n\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}