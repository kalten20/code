{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from '../Components/todo/AuthenticationService';\nimport { API_URL, JPA_API_URL } from './Constants';\n\nclass TodoDataService {\n  retrieveAllTodos(username) {\n    let user = 'user';\n    let password = 'password'; //encoding auth header USINT BTOA JS\n\n    let basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password);\n    return axios.get(`${JPA_API_URL}/users/${username}/todos`, {\n      headers: {\n        authorization: basicAuthHeader\n      }\n    });\n  }\n\n  deleteTodo(username, id) {\n    AuthenticationService.setupAxiosInterceptors();\n    return axios.delete(`http://localhost:8080/users/${username}/todos/${id}`);\n  }\n\n  updateTodo(username, id, todo) {\n    AuthenticationService.setupAxiosInterceptors();\n    return axios.put(`http://localhost:8080/users/${username}/todos/${id}`, todo);\n  }\n\n  createTodo(username, todo) {\n    AuthenticationService.setupAxiosInterceptors();\n    return axios.post(`http://localhost:8080/users/${username}/todos/`, todo);\n  }\n\n}\n\nexport default new TodoDataService();","map":{"version":3,"sources":["/Users/ali/Documents/WS21/Training Spring React/school-app/src/api/TodoDataService.js"],"names":["axios","AuthenticationService","API_URL","JPA_API_URL","TodoDataService","retrieveAllTodos","username","user","password","basicAuthHeader","window","btoa","get","headers","authorization","deleteTodo","id","setupAxiosInterceptors","delete","updateTodo","todo","put","createTodo","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAmC,0CAAnC;AACA,SAAQC,OAAR,EAAiBC,WAAjB,QAAmC,aAAnC;;AAGA,MAAMC,eAAN,CAAsB;AAElBC,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACvB,QAAIC,IAAI,GAAG,MAAX;AACA,QAAIC,QAAQ,GAAG,UAAf,CAFuB,CAGvB;;AACA,QAAIC,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYJ,IAAI,GAAG,GAAP,GAAaC,QAAzB,CAAjC;AAEA,WAAOR,KAAK,CAACY,GAAN,CAAW,GAAET,WAAY,UAASG,QAAS,QAA3C,EACP;AACIO,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAGL;AADV;AADd,KADO,CAAP;AASH;;AAEDM,EAAAA,UAAU,CAACT,QAAD,EAAWU,EAAX,EAAc;AACpBf,IAAAA,qBAAqB,CAACgB,sBAAtB;AAEA,WAAOjB,KAAK,CAACkB,MAAN,CAAc,+BAA8BZ,QAAS,UAASU,EAAG,EAAjE,CAAP;AACH;;AAIDG,EAAAA,UAAU,CAACb,QAAD,EAAUU,EAAV,EAAcI,IAAd,EAAmB;AACzBnB,IAAAA,qBAAqB,CAACgB,sBAAtB;AAEA,WAAOjB,KAAK,CAACqB,GAAN,CAAW,+BAA8Bf,QAAS,UAASU,EAAG,EAA9D,EAAiEI,IAAjE,CAAP;AACH;;AAEDE,EAAAA,UAAU,CAAChB,QAAD,EAAWc,IAAX,EAAgB;AACtBnB,IAAAA,qBAAqB,CAACgB,sBAAtB;AACA,WAAOjB,KAAK,CAACuB,IAAN,CAAY,+BAA8BjB,QAAS,SAAnD,EAA6Dc,IAA7D,CAAP;AACH;;AApCiB;;AA4CtB,eAAe,IAAIhB,eAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport AuthenticationService from  '../Components/todo/AuthenticationService'\nimport {API_URL, JPA_API_URL} from './Constants'\n\n\nclass TodoDataService {\n\n    retrieveAllTodos(username) {\n        let user = 'user'\n        let password = 'password'\n        //encoding auth header USINT BTOA JS\n        let basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password)\n\n        return axios.get(`${JPA_API_URL}/users/${username}/todos`,\n        {\n            headers : {\n                authorization : basicAuthHeader\n            }\n        }\n        \n        )\n\n    }\n\n    deleteTodo(username, id){\n        AuthenticationService.setupAxiosInterceptors()\n        \n        return axios.delete(`http://localhost:8080/users/${username}/todos/${id}`)\n    }\n\n    \n\n    updateTodo(username,id, todo){\n        AuthenticationService.setupAxiosInterceptors()\n\n        return axios.put(`http://localhost:8080/users/${username}/todos/${id}`, todo)\n    }\n    \n    createTodo(username, todo){\n        AuthenticationService.setupAxiosInterceptors()\n        return axios.post(`http://localhost:8080/users/${username}/todos/`, todo)\n    }\n\n\n\n\n\n}\n\nexport default new TodoDataService()"]},"metadata":{},"sourceType":"module"}