{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfullLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;else return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';else return user;\n  }\n\n  setupAxiosInterceptors() {\n    let user = 'user';\n    let password = 'password'; //encoding auth header USINT BTOA JS\n\n    let basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/ali/Documents/WS21/Training Spring React /school-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfullLogin","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,wBAAwB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC1CC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,sBAAL;AAEF;;AAEDC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP,CAAlB,KACK,OAAO,IAAP;AACR;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP,CAAhB,KACK,OAAOA,IAAP;AAER;;AAGLJ,EAAAA,sBAAsB,GAAG;AACrB,QAAII,IAAI,GAAG,MAAX;AACA,QAAIP,QAAQ,GAAG,UAAf,CAFqB,CAIzB;;AAEA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYL,IAAI,GAAG,GAAP,GAAaP,QAAzB,CAAjC;AAEIJ,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKV,cAAL,EAAH,EAA0B;AAE1BU,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,eAA/B;AACC;;AACD,aAAOM,MAAP;AAEH,KARL;AAUH;;AA5C2B;;AAiD5B,eAAe,IAAInB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nclass AuthenticationService {\n\n    registerSuccessfullLogin(username, password) {\n       sessionStorage.setItem('authenticatedUser', username) \n       this.setupAxiosInterceptors();\n\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser')\n    }\n\n    isUserLoggedIn(){\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        else return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        else return user\n\n    }\n\n\nsetupAxiosInterceptors() {\n    let user = 'user'\n    let password = 'password'\n\n//encoding auth header USINT BTOA JS\n\nlet basicAuthHeader = 'Basic ' + window.btoa(user + \":\" + password)\n\n    axios.interceptors.request.use(\n        (config) => {\n            if(this.isUserLoggedIn()) {\n\n            config.headers.authorization = basicAuthHeader\n            }\n            return config\n\n        }\n    )\n}\n}\n\n\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}